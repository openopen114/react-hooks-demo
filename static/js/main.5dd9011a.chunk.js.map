{"version":3,"sources":["components/SearchArea.js","components/dataService.js","App.jsx","serviceWorker.js","index.js"],"names":["SearchArea","_useState","useState","_useState2","Object","slicedToArray","query","setQuery","_useDataApi","initialUrl","initialData","data","setData","_useState3","_useState4","url","setUrl","_useState5","_useState6","isLoading","setIsLoading","_useState7","_useState8","isError","setIsError","fetchData","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","result","wrap","_context","prev","next","console","log","concat","axios","sent","t0","stop","this","apply","arguments","useEffect","doGet","event","preventDefault","useDataApi","hits","react_default","createElement","react","onSubmit","type","value","onChange","target","map","item","key","objectID","href","title","App","className","SearchArea_SearchArea","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5dd9011a.chunk.js","sourcesContent":["import React, { Fragment, useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nimport { useDataApi } from \"./dataService.js\";\n\nexport const SearchArea = () => {\n  const initialUrl = \"http://hn.algolia.com/api/v1/search?query=redux\";\n  const initialData = { hits: [] };\n  const [query, setQuery] = useState(\"redux\");\n  const { data, isLoading, isError, doGet } = useDataApi(\n    initialUrl,\n    initialData\n  );\n\n  return (\n    <Fragment>\n      {/* Search Form */}\n      <form\n        onSubmit={event =>\n          doGet(event, `http://hn.algolia.com/api/v1/search?query=${query}`)\n        }\n      >\n        <input\n          type=\"text\"\n          value={query}\n          onChange={event => setQuery(event.target.value)}\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n\n      {/* Error Alert */}\n      {isError && <div>Something went wrong ...</div>}\n\n      {/* Display Data */}\n      {isLoading ? (\n        <div>Loading ...</div>\n      ) : (\n        <ul>\n          {data.hits.map(item => (\n            <li key={item.objectID}>\n              <a href={item.url}>{item.title}</a>\n            </li>\n          ))}\n        </ul>\n      )}\n    </Fragment>\n  );\n};\n","import React, { Fragment, useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\n\n\nexport const useDataApi = (initialUrl, initialData) => {\n  const [data, setData] = useState(initialData);\n  const [url, setUrl] = useState(initialUrl);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  const fetchData = async () => {\n  \tconsole.log(`=== fetch data url: ${url} ===`);\n    setIsError(false);\n    setIsLoading(true);\n\n    try {\n      const result = await axios(url);\n\n      setData(result.data);\n    } catch (error) {\n      setIsError(true);\n    }\n\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, [url]);\n\n  const doGet = (event, url) => {\n    setUrl(url);\n    event.preventDefault();\n  };\n\n  return { data, isLoading, isError, doGet };\n};\n","import React, { Component, useState } from 'react';\nimport { SearchArea } from './components/SearchArea.js'\n\n\n \nclass App extends Component {  \n  render() { \n    return (\n      <div className=\"App\"> \n        <h1>React Hooks</h1>\n        <SearchArea />\n      </div>\n    );\n  }\n}\n\nexport default App;\n \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}